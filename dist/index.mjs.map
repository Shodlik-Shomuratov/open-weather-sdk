{"version":3,"sources":["../index.ts","../utils/generate-weather.util.ts","../redis/index.ts"],"sourcesContent":["import axios from \"axios\";\nimport { CityData } from \"./types/city-data.type\";\nimport { ResponseType } from \"./types/response.type\";\nimport { WeatherType } from \"./types/weather.type\";\nimport { SDKOptions } from \"./types/sdk-options.type\";\nimport { generateWeatherData } from \"./utils/generate-weather.util\";\nimport { redisClient } from \"./redis\";\nimport { RedisOptions } from \"./types/redis-options.type\";\n\nconst apiKeys: string[] = [];\n\nclass OpenWeatherSDK {\n\tprivate API_KEY: string = \"\";\n\tprivate mode: \"default\" | \"polling\" = \"default\";\n\tprivate cities: CityData[] = [];\n\tprivate redis: RedisOptions | null = null;\n\tprivate intervals: NodeJS.Timeout[] = [];\n\n\tconstructor(API_KEY: string, options?: SDKOptions) {\n\t\tconst key = apiKeys.find((key) => key === API_KEY);\n\n\t\tif (key) {\n\t\t\tthrow new Error(\"Only 1 instance for 1 key!\");\n\t\t}\n\n\t\tthis.API_KEY = API_KEY;\n\t\tapiKeys.push(API_KEY);\n\n\t\tif (options) {\n\t\t\tif (options.mode) {\n\t\t\t\tthis.mode = options.mode;\n\n\t\t\t\tif (this.mode === \"polling\") {\n\t\t\t\t\tthis.updateWeatherData();\n\n\t\t\t\t\tif (options.redis) {\n\t\t\t\t\t\tthis.redis = options.redis;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getCurrentWeather(\n\t\tcityName: string\n\t): Promise<ResponseType<WeatherType>> {\n\t\ttry {\n\t\t\tif (this.mode === \"polling\") {\n\t\t\t\tif (this.redis) {\n\t\t\t\t\tconst redis = await redisClient({\n\t\t\t\t\t\t...this.redis,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!redis) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: null,\n\t\t\t\t\t\t\tstatus: \"ERROR\",\n\t\t\t\t\t\t\terrorMessage: \"Check your REDIS credentials!\",\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst raw = await redis.HGET(\"cities\", cityName);\n\n\t\t\t\t\tif (raw) {\n\t\t\t\t\t\tconst cityData = JSON.parse(raw);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: cityData.weather,\n\t\t\t\t\t\t\tstatus: \"OK\",\n\t\t\t\t\t\t\terrorMessage: null,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { data } = await axios.get(\n\t\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${this.API_KEY}`\n\t\t\t\t\t);\n\n\t\t\t\t\tconst weatherData = generateWeatherData(data);\n\t\t\t\t\tconst cityData = {\n\t\t\t\t\t\tname: data.name,\n\t\t\t\t\t\tcountry: data.sys.country,\n\t\t\t\t\t\tweather: weatherData,\n\t\t\t\t\t};\n\n\t\t\t\t\tconst keys = await redis.HKEYS(\"cities\");\n\n\t\t\t\t\tif (keys.length >= 10) {\n\t\t\t\t\t\tredis.HDEL(\"cities\", keys[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait redis.HSET(\n\t\t\t\t\t\t\"cities\",\n\t\t\t\t\t\tString(cityName),\n\t\t\t\t\t\tJSON.stringify(cityData)\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: cityData.weather,\n\t\t\t\t\t\tstatus: \"OK\",\n\t\t\t\t\t\terrorMessage: null,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tconst isCityExists = this.cities.find(\n\t\t\t\t\t\t(city) => city.name === cityName\n\t\t\t\t\t);\n\n\t\t\t\t\tif (isCityExists) {\n\t\t\t\t\t\tconsole.log(\"Exist\");\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: isCityExists.weather,\n\t\t\t\t\t\t\tstatus: \"OK\",\n\t\t\t\t\t\t\terrorMessage: null,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { data } = await axios.get(\n\t\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${this.API_KEY}`\n\t\t\t\t\t);\n\n\t\t\t\t\tconst weatherData = generateWeatherData(data);\n\t\t\t\t\tconst cityData = {\n\t\t\t\t\t\tname: data.name,\n\t\t\t\t\t\tcountry: data.sys.country,\n\t\t\t\t\t\tweather: weatherData,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (this.cities.length >= 10) {\n\t\t\t\t\t\tthis.cities.shift();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.cities.push(cityData);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: cityData.weather,\n\t\t\t\t\t\tstatus: \"OK\",\n\t\t\t\t\t\terrorMessage: null,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst { data } = await axios.get(\n\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${this.API_KEY}`\n\t\t\t\t);\n\n\t\t\t\tconst weatherData = generateWeatherData(data);\n\n\t\t\t\treturn {\n\t\t\t\t\tdata: weatherData,\n\t\t\t\t\tstatus: \"OK\",\n\t\t\t\t\terrorMessage: null,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\tif (\n\t\t\t\terror.response.data.cod === 401 &&\n\t\t\t\terror.response.data.message.includes(\"Invalid API key\")\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tdata: null,\n\t\t\t\t\tstatus: \"ERROR\",\n\t\t\t\t\terrorMessage: \"Invalid API Key!\",\n\t\t\t\t};\n\t\t\t} else if (\n\t\t\t\terror.response.data.cod === \"404\" &&\n\t\t\t\terror.response.data.message === \"city not found\"\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tdata: null,\n\t\t\t\t\tstatus: \"ERROR\",\n\t\t\t\t\terrorMessage: \"City not found!\",\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconsole.log(error.response.data.message);\n\n\t\t\treturn {\n\t\t\t\tdata: null,\n\t\t\t\tstatus: \"ERROR\",\n\t\t\t\terrorMessage: error.response.data.message,\n\t\t\t};\n\t\t}\n\t}\n\n\tremoveKey(API_KEY: string) {\n\t\tconst index = apiKeys.findIndex((key) => key === API_KEY);\n\t\tapiKeys.splice(index, 1);\n\t}\n\n\tdestroy() {\n\t\tthis.intervals.forEach((intervalId) => clearInterval(intervalId));\n\t\tthis.intervals = [];\n\t}\n\n\tprivate async updateWeatherData() {\n\t\tif (this.redis) {\n\t\t\tconst redis = await redisClient({\n\t\t\t\t...this.redis,\n\t\t\t});\n\n\t\t\tif (redis) {\n\t\t\t\tconst intervalId = setInterval(async () => {\n\t\t\t\t\tconst cities: any = await redis.HGETALL(\"cities\");\n\n\t\t\t\t\tfor (const key in cities) {\n\t\t\t\t\t\tconst raw = cities[key];\n\t\t\t\t\t\tconst city = JSON.parse(raw);\n\n\t\t\t\t\t\tconst { data } = await axios.get(\n\t\t\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${city.name}&appid=${this.API_KEY}`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcity.weather = generateWeatherData(data);\n\n\t\t\t\t\t\tawait redis.HSET(\n\t\t\t\t\t\t\t\"cities\",\n\t\t\t\t\t\t\tcity.name,\n\t\t\t\t\t\t\tJSON.stringify(city)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}, 1000 * 60 * 10);\n\n\t\t\t\tthis.intervals.push(intervalId);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Check REDIS credentials!\");\n\t\t\t}\n\t\t} else {\n\t\t\tconst intervalId = setInterval(async () => {\n\t\t\t\tconst updatedData = await Promise.all(\n\t\t\t\t\tthis.cities.map(async (city) => {\n\t\t\t\t\t\tconst { data } = await axios.get(\n\t\t\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${city.name}&appid=${this.API_KEY}`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcity.weather = generateWeatherData(data);\n\n\t\t\t\t\t\treturn city;\n\t\t\t\t\t})\n\t\t\t\t);\n\n\t\t\t\tthis.cities = updatedData;\n\t\t\t}, 1000 * 60 * 10);\n\t\t\tthis.intervals.push(intervalId);\n\t\t}\n\t}\n}\n\nexport default OpenWeatherSDK;\n","import { WeatherType } from \"../types/weather.type\";\n\nexport function generateWeatherData(data: any): WeatherType {\n\tconst weatherData = {\n\t\tweather: {\n\t\t\tmain: data.weather[0].main,\n\t\t\tdescription: data.weather[0].description,\n\t\t},\n\t\ttemperature: {\n\t\t\ttemp: data.main.temp,\n\t\t\tfeels_like: data.main.feels_like,\n\t\t},\n\t\tvisibility: data.visibility,\n\t\twind: {\n\t\t\tspeed: data.wind.speed,\n\t\t},\n\t\tdatetime: data.dt,\n\t\tsys: {\n\t\t\tsunrise: data.sys.sunrise,\n\t\t\tsunset: data.sys.sunset,\n\t\t},\n\t\ttimezone: data.timezone,\n\t\tname: data.name,\n\t};\n\n\treturn weatherData;\n}\n","import { RedisClientType, createClient } from \"redis\";\nimport { RedisOptions } from \"../types/redis-options.type\";\n\nexport async function redisClient(options: RedisOptions) {\n\ttry {\n\t\tlet client: RedisClientType;\n\n\t\tif (options.username && options.password) {\n\t\t\tclient = createClient({\n\t\t\t\turl: `redis://${options.username}:${options.password}@${options.host}:${options.port}`,\n\t\t\t});\n\t\t} else {\n\t\t\tclient = createClient({\n\t\t\t\turl: `redis://${options.host}:${options.port}`,\n\t\t\t});\n\t\t}\n\n\t\tawait client.connect();\n\n\t\tclient.on(\"error\", (error) => {\n\t\t\tthrow error;\n\t\t});\n\n\t\treturn client;\n\t} catch (error) {\n\t\tconsole.log(error);\n\n\t\treturn null;\n\t}\n}\n"],"mappings":"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","names":["key","cityData"]}